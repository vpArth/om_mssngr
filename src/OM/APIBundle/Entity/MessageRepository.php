<?php

namespace OM\APIBundle\Entity;

use Doctrine\ORM\EntityRepository;
use OM\APIBundle\Entity\Message;
//use Doctrine\ORM\Tools\Pagination\Paginator;
use OM\APIBundle\Helper\Paginator;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends EntityRepository
{
    /**
     * @param Paginator $msgs
     * @return array
     */
    protected function formatList(Paginator $msgs)
    {
        $rows = array();
        foreach ($msgs as $msg) {
            $rows[] = array(
                'id' => $msg->getId(),
                'text'=> $msg->getText(),
                'from' => array(
                    'id' => $msg->getFromUser()->getId(),
                    'username' => $msg->getFromUser()->getUsername()
                ),
                'to' => array(
                    'id' => $msg->getToUser()->getId(),
                    'username' => $msg->getToUser()->getUsername()
                )
            );
        }
        return array(
            'rows' => $rows,
            'count' => count($msgs)
        );
    }
    public function msgList($params)
    {
        $page = isset($params['page']) ? $params['page'] : 0;
        $size = isset($params['size']) ? $params['size'] : 5;

        $dql =
            "SELECT m FROM OM\\APIBundle\\Entity\\Message m
            LEFT JOIN m.fromUser f
            LEFT JOIN m.toUser t";
        $query = $this->_em->createQuery($dql)
            ->setFirstResult($page * $size)
            ->setMaxResults($size);

        $paginator = new Paginator($query, $fetchJoinCollection = false);

        return $this->formatList($paginator);
    }

    public function dialog($params)
    {
        $page = isset($params['page']) ? $params['page'] : 0;
        $size = isset($params['size']) ? $params['size'] : 5;
        $users = $params['with'];

        $dql =
            "SELECT m FROM OM\\APIBundle\\Entity\\Message m
            JOIN m.fromUser f
            JOIN m.toUser t
            WHERE m.from_id IN (:with) AND m.to_id IN (:with)";
        $query = $this->_em->createQuery($dql)
            ->setFirstResult($page * $size)
            ->setMaxResults($size)
            ->setParameter('with', $users);

        $paginator = new Paginator($query, $fetchJoinCollection = false);

        return $this->formatList($paginator);
    }
}
