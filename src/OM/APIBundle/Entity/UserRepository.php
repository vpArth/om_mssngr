<?php

namespace OM\APIBundle\Entity;

use Doctrine\ORM\EntityRepository;
use OM\APIBundle\Helper\Paginator;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    private static function getField($name, $param = null)
    {
        switch ($name)
        {
            case 'online':
                return "
CASE WHEN
    CASE WHEN u.lastLogin IS NULL
    THEN 0
    ELSE UNIX_TIMESTAMP()-u.lastLogin-{$param}
    END  >= 0
THEN 0
ELSE 1
END online";
            case 'messages':
                return "0 messages";
        }
        return "1";
    }

    protected function formatList(Paginator $paginator, $params = array())
    {
        $rows = array();
        /** @var User $row */
        foreach ($paginator as $row) {
            $values = $row->getValues();
            if (isset($params['fields'])) {
                $r = array();
                foreach ($params['fields'] as $f) {
                    $r[$f] = $values[$f];
                }
                $rows[] = $r;
            } else {
                $rows[] = $values;
            }
        }
        return array(
            'rows' => $rows,
            'count' => count($paginator)
        );
    }

    public function userList($params)
    {
        $page = isset($params['page']) ? $params['page'] : 0;
        $size = isset($params['size']) ? $params['size'] : 5;

        $dql = "SELECT m FROM OM\\APIBundle\\Entity\\User m";
        $query = $this->getEntityManager()->createQuery($dql)
            ->setFirstResult($page * $size)
            ->setMaxResults($size);

        $paginator = new Paginator($query, $fetchJoinCollection = false);

        return $this->formatList($paginator, $params);
    }

    public function getProfile($id, $params)
    {
        $qb = $this->createQueryBuilder('u');
        $select = array();
        if (isset($params['fields'])) {
            foreach ($params['fields'] as $field) {
                $select[] = "u.{$field}";
            }
        }
//        $select[] = self::getField("online", 600);
        $select[] = self::getField("messages");
        $qb->select($select);
        $qb->where('u.id = :id AND u.isActive = 1')
            ->setParameter('id', $id);
        return $qb->getQuery()->getOneOrNullResult();
    }
}
