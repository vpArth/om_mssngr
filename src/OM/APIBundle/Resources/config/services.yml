parameters:
#    alawar_f2_p_admin.example.class: Alawar\F2P\AdminBundle\Example
    secretKey: %secret%
    needSign: 0
    responseFormat: json # only "json" value available yet
    log.message:
        maxLength: 30
        trimLength: 25
    memcached.servers:
      - { host: 127.0.0.1, port: 11211 }

services:
    omapi.profiler.action_listener:
        class: OM\APIBundle\EventListener\ProfileListener
        arguments: [@service_container]
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onRequest }
            - { name: kernel.event_listener, event: kernel.controller, method: onController }
            - { name: kernel.event_listener, event: kernel.view, method: onView }
            - { name: kernel.event_listener, event: kernel.response, method: onResponse }
            - { name: kernel.event_listener, event: kernel.terminate, method: onTerminate }
            - { name: kernel.event_listener, event: kernel.exception, method: onException }

    #signed requests and response, rely on needSign parameter
    omapi.tokens.action_listener:
        class: OM\APIBundle\EventListener\SignHandler
        arguments: ["%secretKey%", "%needSign%"]
        tags:
            - { name: kernel.event_listener, event: kernel.controller, method: onKernelController }
            - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }
    #finish trigger: used for logs
    omapi.finish.action_listener:
        class: OM\APIBundle\EventListener\FinishListener
        arguments: [ @logger, "%log.message%" ]
        tags:
            - { name: kernel.event_listener, event: kernel.terminate, method: onFinish }
    #response format selecting, now relied on responseFormat parameter
    omapi.responseformat.action_listener:
        class: OM\APIBundle\EventListener\ResponseFormat
        arguments: [ %responseFormat% ]
        tags:
            - { name: kernel.event_listener, event: kernel.view, method: onResponse }
    #errors handling: used both for exceptions catching and API errors processing
    omapi.exception.action_listener:
        class: OM\APIBundle\EventListener\ExceptionListener
        arguments: [ @logger ]
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onException }

    omapi.model_manager:
        abstract: true
        calls:
            - [setContainer, ["@service_container"]]

    omapi.user_model_manager:
        parent: omapi.model_manager
        class: OM\APIBundle\Entity\UserModelManager
        arguments: [ @doctrine.orm.entity_manager, OM\APIBundle\Entity\User ]

    omapi.message_model_manager:
        parent: omapi.model_manager
        class: OM\APIBundle\Entity\MessageModelManager
        arguments: [ @doctrine.orm.entity_manager, OM\APIBundle\Entity\Message ]

    memcached:
        class: Doctrine\Common\Cache\MemcacheCache
        calls:
            - [ addServers, [ %memcached.servers% ]]